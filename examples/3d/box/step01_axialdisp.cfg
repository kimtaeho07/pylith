[pylithapp.metadata]
#  y
#  ^
#  |
#   --> x
#             |
#             v
#         ----------
#        |          |
#        |          | 
#   <--- |          | --->
#        |          |
#        |          |
#         ----------
#             ^
#             |
#
# Dirichlet boundary conditions
#
# boundary_xneg: Ux=-a
# boundary_xpos: Ux=+a
# boundary_yneg: Ux=+b
# boundary_ypos: Ux=-b
# boundary_zneg: Uz=0
base = [pylithapp.cfg]
description = Axial extension using Dirichlet boundary conditions.
authors = [Brad Aagaard]
keywords = [axial extension]
arguments = [step01_axialdisp.cfg]
version = 1.0.0
pylith_version = [>=3.0, <4.0]

features = [
    Static simulation,
    ILU preconditioner,
    pylith.bc.DirichletTimeDependent,
    spatialdata.spatialdb.ZeroDB
    ]

[pylithapp]
# File with version information and parameters (including defaults).
#
# You can view this file using the pylith_parameters application or
# online at https://geodynamics.github.io/pylith_parameters/.
dump_parameters.filename = output/step01_axialdisp-parameters.json
problem.progress_monitor.filename = output/step01_axialdisp-progress.txt

# Set the name of the problem that will be used to construct the
# output filenames. The default directory for output is 'output'.
problem.defaults.name = step01_axialdisp

# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
[pylithapp.problem]
# We have five Dirichlet boundary conditions as described above.
bc = [bc_xneg, bc_xpos, bc_yneg, bc_ypos, bc_zneg]
bc.bc_xneg = pylith.bc.DirichletTimeDependent
bc.bc_xpos = pylith.bc.DirichletTimeDependent
bc.bc_yneg = pylith.bc.DirichletTimeDependent
bc.bc_ypos = pylith.bc.DirichletTimeDependent
bc.bc_zneg = pylith.bc.DirichletTimeDependent

# Degrees of freedom:
#   x: 0
#   y: 1
#   z: 2
#
# The 'label' corresponds to the name of the nodeset we created in
# CUBIT/Trelis in bc.jou.


[pylithapp.problem.bc.bc_xpos]
# Set Ux=+2.0*m on the +x boundary.
constrained_dof = [0]
label = boundary_xpos

# The spatial database must contain both components even though we do
# not constrain the y and z components.
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.label = Dirichlet BC on +x boundary
db_auxiliary_field.values = [initial_amplitude_x, initial_amplitude_y, initial_amplitude_z]
db_auxiliary_field.data = [+2.0*m, 0*m, 0*m]

[pylithapp.problem.bc.bc_xneg]
# Set Ux=-2.0*m on the +x boundary.
constrained_dof = [0]
label = boundary_xneg

db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.label = Dirichlet BC on -x boundary
db_auxiliary_field.values = [initial_amplitude_x, initial_amplitude_y, initial_amplitude_z]
db_auxiliary_field.data = [-2.0*m, 0*m, 0*m]

[pylithapp.problem.bc.bc_yneg]
# Set Ux=+0.4*m on the -y boundary.
constrained_dof = [1]
label = boundary_yneg

db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.label = Dirichlet BC on -y boundary
db_auxiliary_field.values = [initial_amplitude_x, initial_amplitude_y, initial_amplitude_z]
db_auxiliary_field.data = [0*m, +0.4*m, 0*m]

[pylithapp.problem.bc.bc_ypos]
# Set Ux=-0.4*m on the +y boundary.
constrained_dof = [1]
label = boundary_ypos

db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.label = Dirichlet BC on +y boundary
db_auxiliary_field.values = [initial_amplitude_x, initial_amplitude_y, initial_amplitude_z]
db_auxiliary_field.data = [0*m, -0.4*m, 0*m]

[pylithapp.problem.bc.bc_zneg]
# Set Uz=0*m on the -z boundary.
constrained_dof = [2]
label = boundary_zneg

db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.label = Dirichlet BC on -z boundary


# End of file
