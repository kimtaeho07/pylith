[pylithapp.metadata]
#  y
#  ^
#  |
#   --> x
#
#             --->
#          ----------
#          |        |
#        | |        | ^
#        v |        | |
#          |        |
#          ----------
#             <--
#
# Dirichlet boundary conditions
#
# boundary_xneg: Ux = a*y, Uy = a*x
# boundary_yneg: Ux = a*y, Uy = a*x
# boundary_xpos: Ux = a*y, Uy = a*x
# boundary_ypos: Ux = a*y, Uy = a*x
# boundary_zneg: Uz=0
base = [pylithapp.cfg]
description = Simple shear using Dirichlet boundary conditions.
authors = [Brad Aagaard]
keywords = [simple shear]
arguments = [step02_sheardisp.cfg]
version = 1.0.0
pylith_version = [>=3.0, <4.0]

features = [
    Static simulation,
    ILU preconditioner,
    pylith.bc.DirichletTimeDependent,
    spatialdata.spatialdb.SimpleDB,
    spatialdata.spatialdb.ZeroDB
    ]

[pylithapp]
# File with version information and parameters (including defaults).
#
# You can view this file using the pylith_parameters application or
# online at https://geodynamics.github.io/pylith_parameters/.
dump_parameters.filename = output/step02_sheardisp-parameters.json
problem.progress_monitor.filename = output/step02_sheardisp-progress.txt

# Set the name of the problem that will be used to construct the
# output filenames. The default directory for output is 'output'.
problem.defaults.name = step02_sheardisp


# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
[pylithapp.problem]
# We have five Dirichlet boundary conditions as described above.
bc = [bc_xneg, bc_xpos, bc_yneg, bc_ypos, bc_zneg]
bc.bc_xneg = pylith.bc.DirichletTimeDependent
bc.bc_xpos = pylith.bc.DirichletTimeDependent
bc.bc_yneg = pylith.bc.DirichletTimeDependent
bc.bc_ypos = pylith.bc.DirichletTimeDependent
bc.bc_zneg = pylith.bc.DirichletTimeDependent

# Degrees of freedom:
#   x: 0
#   y: 1
#   z: 2
#
# The 'label' corresponds to the name of the nodeset we created in
# CUBIT/Trelis in bc.jou.
#
# To prescribe a linear variation in the displacement field over each
# boundary surface, we use a SimpleDB with two data points. PyLith
# will use linear interpolation (query_type == linear) to compute the
# values between the two end points. The end points must be on the
# edges of the domain or outside the domain; SimpleDB using linear
# interpolation do not support extrapolation.

[pylithapp.problem.bc.bc_xneg]
constrained_dof = [1]
label = boundary_xneg
db_auxiliary_field = spatialdata.spatialdb.SimpleDB
db_auxiliary_field.label = Dirichlet BC -x boundary
db_auxiliary_field.iohandler.filename = sheardisp_bc_xneg.spatialdb
db_auxiliary_field.query_type = linear

[pylithapp.problem.bc.bc_yneg]
constrained_dof = [0]
label = boundary_yneg
db_auxiliary_field = spatialdata.spatialdb.SimpleDB
db_auxiliary_field.label = Dirichlet BC -y boundary
db_auxiliary_field.iohandler.filename = sheardisp_bc_yneg.spatialdb
db_auxiliary_field.query_type = linear

[pylithapp.problem.bc.bc_xpos]
constrained_dof = [1]
label = boundary_xpos
db_auxiliary_field = spatialdata.spatialdb.SimpleDB
db_auxiliary_field.label = Dirichlet BC +x boundary
db_auxiliary_field.iohandler.filename = sheardisp_bc_xpos.spatialdb
db_auxiliary_field.query_type = linear

[pylithapp.problem.bc.bc_ypos]
constrained_dof = [0]
label = boundary_ypos
db_auxiliary_field = spatialdata.spatialdb.SimpleDB
db_auxiliary_field.label = Dirichlet BC +y boundary
db_auxiliary_field.iohandler.filename = sheardisp_bc_ypos.spatialdb
db_auxiliary_field.query_type = linear

[pylithapp.problem.bc.bc_zneg]
constrained_dof = [2]
label = boundary_zneg
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.label = Dirichlet BC -z boundary


# End of file
