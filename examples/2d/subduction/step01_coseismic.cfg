[pylithapp.metadata]
base = [pylithapp.cfg]
description = Coseismic prescribed slip between the continental crust and the subducting oceanic crust.
authors = [Brad Aagaard]
keywords = [prescribed slip]
arguments = [step01_coseismic.cfg]
version = 2.0.0
pylith_version = [>=3.0, <4.0]

features = [
    Static simulation,
    pylith.faults.FaultCohesiveKin,
    pylith.bc.DirichletTimeDependent,
    spatialdata.spatialdb.SimpleDB,
    pylith.faults.KinSrcStep,
    pylith.bc.ZeroDB
    ]

# ----------------------------------------------------------------------
# Monitoring and parameter viewing.
# ----------------------------------------------------------------------
[pylithapp]
# You can view this file using the pylith_parameters application or
# online at https://geodynamics.github.io/pylith_parameters/.
dump_parameters.filename = output/step01_coseismic-parameters.json
problem.progress_monitor.filename = output/step01_coseismic-progress.txt

# Set the name of the problem that will be used to construct the
# output filenames. The default directory for output is 'output'.
problem.defaults.name = step01_coseismic

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.timedependent]
# Define the total time for the simulation and initial time step size.
initial_dt = 5.0*year
start_time = -5.0*year
end_time = 0.0*year

# ----------------------------------------------------------------------
# faults
# ----------------------------------------------------------------------
[pylithapp.problem]
interfaces = [fault]
interfaces.fault = pylith.faults.FaultCohesiveKin

[pylithapp.problem.interfaces.fault]
# The label corresponds to the nodeset we created in CUBIT/Trelis for the fault.
label = fault_slabtop

observers.observer.data_fields = [slip]

[pylithapp.problem.interfaces.fault.eq_ruptures.rupture]
# We specify slip as a function of depth, so we use a SimpleDB with
# linear interpolation.
db_auxiliary_field = spatialdata.spatialdb.SimpleDB
db_auxiliary_field.label = Fault rupture auxiliary field spatial database
db_auxiliary_field.iohandler.filename = fault_coseismic.spatialdb
db_auxiliary_field.query_type = linear


# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
[pylithapp.problem]
# Set bc to an array of 4 boundary conditions:
#   'bc_east_crust'
#   'bc_east_mantle'
#   'bc_west'
#   'bc_bottom_mantle'
#
# On each boundary we fix the displacement normal to the boundary
# (roller boundary condition).
#
# The label corresponds to the name of the nodeset in CUBIT/Trelis.
bc = [bc_east_crust, bc_east_mantle, bc_west, bc_bottom_mantle]


# East boundary (crust)
[pylithapp.problem.bc.bc_east_crust]
constrained_dof = [0]
label = bndry_east_crust
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.label = Dirichlet BC on east boundary (crust)


# East boundary (mantle)
[pylithapp.problem.bc.bc_east_mantle]
constrained_dof = [0]
label = bndry_east_mantle
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.label = Dirichlet BC on east boundary (mantle)


# West boundary
[pylithapp.problem.bc.bc_west]
constrained_dof = [0]
label = bndry_west
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.label = Dirichlet BC on west boundary


# Bottom boundary (mantle)
[pylithapp.problem.bc.bc_bottom_mantle]
constrained_dof = [1]
label = bndry_bot_mantle
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.label = Dirichlet BC on bottom boundary (mantle)


# End of file
