[pylithapp.metadata]
version = 1.0.0
pylith_version = [>=2.0, <3.0]
# ----------------------------------------------------------------------
# PROBLEM DESCRIPTION
# ----------------------------------------------------------------------
#
# This simulation models an earthquake cycle with spontaneous ruptures
# on the subduction interfaces using slip-weakening friction. The
# deformation is drive by aseismic creep (8 cm/yr) along the bottom
# interface between the subducting oceanic crust and the mantle.
#
# ----------------------------------------------------------------------
# RUNNING THE SIMULATON
# ----------------------------------------------------------------------
#
# This is not a self-contained simulation configuration file. This
# file specifies only the boundary conditions and earthquake
# parameters for the simulation. The general quasi-static and mesh
# parameters are specificed in the pylithapp.cfg file which PyLith
# reads by default.
#
# To run the simulation:
# pylith step05.cfg
#
# Output will be directed to the 'output' directory.

# ----------------------------------------------------------------------
# Output of parameters used and simulation progress.
# ----------------------------------------------------------------------
[pylithapp]
dump_parameters.filename = output/step05-parameters.json
problem.progress_monitor.filename = output/step05-progress.txt

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.problem.formulation]
# Fault friction is a nonlinear problem so we need to use the
# nonlinear solver.
solver = pylith.problems.SolverNonlinear

[pylithapp.timedependent.formulation.time_step]
total_time = 100.0*year
dt = 2.5*year

# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
[pylithapp.timedependent]
# Set bc to an array of 3 boundary conditions:
#   'boundary_east_mantle'
#   'boundary_west'
#   'boundary_bottom_mantle'
bc = [boundary_east_mantle, boundary_west, boundary_bottom_mantle]

# For all boundaries, we fix the displacement normal to the boundary
# (roller boundary condition) by retaining the default ZeroDispDB,
# which specifies a zero value.
#
# The label corresponds to the name of the nodeset in CUBIT.

# East boundary (mantle)
[pylithapp.timedependent.bc.boundary_east_mantle]
bc_dof = [0]
label = bndry_east_mantle
db_initial.label = Dirichlet BC on east boundary (mantle)

# West boundary
[pylithapp.timedependent.bc.boundary_west]
bc_dof = [0, 1]
label = bndry_west
db_initial.label = Dirichlet BC on west boundary

# Bottom boundary (mantle)
[pylithapp.timedependent.bc.boundary_bottom_mantle]
bc_dof = [1]
label = bndry_bot_mantle
db_initial.label = Dirichlet BC on bottom boundary (mantle)

# ----------------------------------------------------------------------
# faults
# ----------------------------------------------------------------------
[pylithapp.timedependent]
interfaces = [fault_slabtop, fault_slabbot]

# Set the type of fault interface condition.
[pylithapp.timedependent.interfaces]
fault_slabtop = pylith.faults.FaultCohesiveDyn
fault_slabbot = pylith.faults.FaultCohesiveKin

# Slab top --------------------
[pylithapp.timedependent.interfaces.fault_slabtop]
# The label corresponds to the name of the nodeset in CUBIT.
id = 100
label = fault_slabtop

# We must define the quadrature information for fault cells.
# The fault cells are 1D (line).
quadrature.cell = pylith.feassemble.FIATSimplex
quadrature.cell.dimension = 1

# Friction
friction = pylith.friction.SlipWeakening
friction.label = Slip weakening
# Force healing after each time step, so weakening is confined to each
# time step and is not carried over into subsequent time steps.
friction.force_healing = True

friction.db_properties = spatialdata.spatialdb.SimpleGridDB
friction.db_properties.label = Slip weakening
friction.db_properties.filename = fault_slabtop_slipweakening.spatialdb

# Initial fault tractions
traction_perturbation = pylith.faults.TractPerturbation
traction_perturbation.db_initial = spatialdata.spatialdb.SimpleGridDB
traction_perturbation.db_initial.label = Initial fault tractions
traction_perturbation.db_initial.filename = fault_slabtop_tractions.spatialdb

[pylithapp.problem.interfaces.fault_slabtop.output]
writer = pylith.meshio.DataWriterHDF5
writer.filename = output/step05-fault-slabtop.h5
vertex_info_fields = [normal_dir, strike_dir]
vertex_data_fields = [slip, slip_rate, traction]


# Slab bottom --------------------
[pylithapp.timedependent.interfaces.fault_slabbot]
# The label corresponds to the name of the nodeset in CUBIT.
label = fault_slabbot
id = 101

# We must define the quadrature information for fault cells.
# The fault cells are 1D (line).
quadrature.cell = pylith.feassemble.FIATSimplex
quadrature.cell.dimension = 1

# Switch to constant slip rate time function.
[pylithapp.timedependent.interfaces.fault_slabbot.eq_srcs.rupture]
slip_function = pylith.faults.ConstRateSlipFn

# The creep rate and slip time are uniform, so use UniformDB for simplicity.
[pylithapp.timedependent.interfaces.fault_slabbot.eq_srcs.rupture.slip_function]
slip_rate = spatialdata.spatialdb.UniformDB
slip_rate.label = Slip rate
slip_rate.values = [left-lateral-slip, fault-opening]
slip_rate.data = [8.0*cm/year, 0.0*cm/year]

# Slip time is uniform, so use UniformDB for convenience
slip_time = spatialdata.spatialdb.UniformDB
slip_time.label = Slip time
slip_time.values = [slip-time]
slip_time.data = [0.0*year]

# ----------------------------------------------------------------------
# output
# ----------------------------------------------------------------------
# Domain
[pylithapp.problem.formulation.output.domain]
writer.filename = output/step05.h5
time_step = 1.0*year

# Ground surface
[pylithapp.problem.formulation.output.subdomain]
writer.filename = output/step05-groundsurf.h5

# Faults
[pylithapp.problem.interfaces.fault_slabtop.output]
writer = pylith.meshio.DataWriterHDF5
writer.filename = output/step05-fault-slabtop.h5

[pylithapp.problem.interfaces.fault_slabbot.output]
writer = pylith.meshio.DataWriterHDF5
writer.filename = output/step05-fault-slabbot.h5

# Materials
[pylithapp.timedependent.materials.continent_crust.output]
writer.filename = output/step05-concrust.h5
cell_data_fields = []

[pylithapp.timedependent.materials.continent_mantle.output]
writer.filename = output/step05-conmantle.h5
cell_data_fields = []

[pylithapp.timedependent.materials.ocean_crust.output]
writer.filename = output/step05-oceancrust.h5
cell_data_fields = []

[pylithapp.timedependent.materials.ocean_mantle.output]
writer.filename = output/step05-oceanmantle.h5
cell_data_fields = []


# ----------------------------------------------------------------------
# PETSc
# ----------------------------------------------------------------------
[pylithapp.timedependent.interfaces.fault_slabtop]
# Zero tolerance for locking fault (no slip). Must be larger than ksp tolerance.
zero_tolerance = 1.0e-8

[pylithapp.petsc]
malloc_dump =

# Convergence parameters.
ksp_rtol = 1.0e-20
ksp_atol = 1.0e-9
ksp_max_it = 1000
ksp_gmres_restart = 50

snes_rtol = 1.0e-20
snes_atol = 1.0e-7

snes_max_it = 1000


# Friction sensitivity solve used to compute the increment in slip
# associated with changes in the Lagrange multiplier imposed by the
# fault constitutive model.
friction_pc_type = asm
friction_sub_pc_factor_shift_type = nonzero
friction_ksp_max_it = 25
friction_ksp_gmres_restart = 30
friction_ksp_error_if_not_converged = true

# Uncomment to view details of friction sensitivity solve.
#friction_ksp_monitor = true
#friction_ksp_view = true
#friction_ksp_converged_reason = true

# End of file
