[pylithapp.metadata]
base = [pylithapp.cfg]
description = Combine the interseismic deformation from Step 2 with the coseismic slip from Step 1.
authors = [Brad Aagaard]
keywords = [prescribed slip, aseismic creep, coseismic slip, multiple ruptures]
arguments = [step03_eqcycle.cfg]
version = 2.0.0
pylith_version = [>=3.0, <4.0]

features = [
    Quasitatic simulation,
    pylith.faults.FaultCohesiveKin,
    pylith.bc.DirichletTimeDependent,
    spatialdata.spatialdb.SimpleDB,
    spatialdata.spatialdb.UniformDB,
    pylith.faults.KinSrcConstRate,
    pylith.bc.ZeroDB
    ]

# ----------------------------------------------------------------------
# Monitoring and parameter viewing.
# ----------------------------------------------------------------------
[pylithapp]
dump_parameters.filename = output/step03_eqcycle-parameters.json
problem.progress_monitor.filename = output/step03_eqcycle-progress.txt

# Set the name of the problem that will be used to construct the
# output filenames. The default directory for output is 'output'.
problem.defaults.name = step3_eqcycle

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.timedependent]
# Define the total time for the simulation and initial time step size.
initial_dt = 5.0*year
start_time = -5.0*year
end_time = 300.0*year

# ----------------------------------------------------------------------
# faults
# ----------------------------------------------------------------------
[pylithapp.problem]
interfaces = [fault_slabtop, fault_slabbot]
interfaces.fault_slabtop = pylith.faults.FaultCohesiveKin
interfaces.fault_slabbot = pylith.faults.FaultCohesiveKin

# Slab top --------------------
[pylithapp.problem.interfaces.fault_slabtop]
# The label corresponds to the nodeset we created in CUBIT/Trelis for
# the fault.  The id must be different than any other materials or
# faults.
label = fault_slabtop
id = 100

observers.observer.data_fields = [slip]

# Set earthquake sources to an array consisting of creep and 1 rupture.
eq_ruptures = [creep, rupture]

eq_ruptures.creep = pylith.faults.KinSrcConstRate
eq_ruptures.creep.origin_time = 0.0*year

eq_ruptures.rupture = pylith.faults.KinSrcStep
eq_ruptures.rupture.origin_time = 150.0*year

# Coseismic rupture ---------
[pylithapp.timedependent.interfaces.fault_slabtop.eq_ruptures.rupture]
# We specify slip as a function of depth, so we use a SimpleDB with
# linear interpolation.
db_auxiliary_field = spatialdata.spatialdb.SimpleDB
db_auxiliary_field.label = Fault rupture auxiliary field spatial database
db_auxiliary_field.iohandler.filename = fault_coseismic.spatialdb
db_auxiliary_field.query_type = linear

# Creep ---------
[pylithapp.timedependent.interfaces.fault_slabtop.eq_ruptures.creep]
# We specify slip as a function of depth, so we use a SimpleDB with
# linear interpolation.
db_auxiliary_field = spatialdata.spatialdb.SimpleDB
db_auxiliary_field.label = Fault rupture auxiliary field spatial database
db_auxiliary_field.iohandler.filename = fault_slabtop_creep.spatialdb
db_auxiliary_field.query_type = linear


# Slab bottom --------------------
[pylithapp.problem.interfaces.fault_slabbot]
# The label corresponds to the nodeset we created in CUBIT/Trelis for
# the fault.  The id must be different than any other materials or
# faults.
label = fault_slabbot
id = 101

observers.observer.data_fields = [slip]

# Switch to constant slip rate time function.
[pylithapp.problem.interfaces.fault_slabbot.eq_ruptures]
rupture = pylith.faults.KinSrcConstRate

[pylithapp.problem.interfaces.fault_slabbot.eq_ruptures.rupture]
# The creep rate and slip time are uniform, so use UniformDB for simplicity.
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.label = Fault rupture auxiliary field spatial database
db_auxiliary_field.values = [initiation_time, slip_rate_left_lateral, slip_rate_opening]
db_auxiliary_field.data = [0.0*year, 8.0*cm/year, 0.0*cm/year]


# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
[pylithapp.problem]
# Set bc to an array of 3 boundary conditions:
#   'bc_east_mantle'
#   'bc_west'
#   'bc_bottom_mantle'
#
# On each boundary we fix the displacement normal to the boundary
# (roller boundary condition).
#
# The label corresponds to the name of the nodeset in CUBIT/Trelis.
bc = [bc_east_mantle, bc_west, bc_bottom_mantle]

# East boundary (mantle)
[pylithapp.problem.bc.bc_east_mantle]
constrained_dof = [0]
label = bndry_east_mantle
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.label = Dirichlet BC on east boundary (mantle)


# West boundary
[pylithapp.problem.bc.bc_west]
constrained_dof = [0]
label = bndry_west
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.label = Dirichlet BC on west boundary


# Bottom boundary (mantle)
[pylithapp.problem.bc.bc_bottom_mantle]
constrained_dof = [1]
label = bndry_bot_mantle
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.label = Dirichlet BC on bottom boundary (mantle)


# End of file
